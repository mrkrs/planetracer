// Generated by CoffeeScript 1.4.0
(function() {
  var Plane, broadcast, client, everyone, file, fs, httpServer, nowjs, redis, request, requestAPI, statik, store, updatePlane,
    _this = this;

  statik = require('node-static');

  file = new statik.Server('./public');

  redis = require("redis");

  fs = require('fs');

  request = require("request");

  this.planes = {};

  this.requestsNBR = 0;

  this.start = 0;

  httpServer = require('http').createServer(function(request, response) {
    return request.addListener('end', function() {
      return file.serve(request, response);
    });
  }).listen(8181);

  nowjs = require("now");

  everyone = nowjs.initialize(httpServer);

  client = redis.createClient(7777);

  everyone.now.test = function() {
    _this.start = new Date().getTime();
    return requestAPI();
  };

  updatePlane = function(_data) {
    var count, creates, data, key, pack, plane, planes, updates, _i, _key, _len;
    data = _data.planes;
    _this.requestsNBR += 1;
    updates = {};
    creates = 0;
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      pack = data[_i];
      for (_key in pack) {
        plane = pack[_key];
        key = "" + _key + " | " + plane[1] + " | " + plane[10] + " / " + plane[2];
        if (!(_this.planes[key] != null)) {
          creates += 1;
          _this.planes[key] = new Plane(key);
        }
        _this.planes[key].update(plane, function(key, data) {
          return updates[key] = data;
        });
      }
    }
    count = 0;
    for (key in updates) {
      count += 1;
    }
    planes = 0;
    for (key in _this.planes) {
      planes += 1;
    }
    console.log("PLANES : " + planes + " | UPDATES : " + count + " | CREATES : " + creates);
    broadcast(updates);
    return everyone.now.log({
      updates: count,
      planes: planes,
      creates: creates,
      requests: _this.requestsNBR,
      start: _this.start
    });
  };

  requestAPI = function(callback) {
    var now;
    now = new Date().getTime();
    console.log('requesting ...');
    return request("http://planefinder.net/endpoints/update.php?faa=1", function(error, response, body) {
      var result;
      console.log('received.');
      result = JSON.parse(body);
      updatePlane(result);
      return setTimeout(function() {
        return requestAPI();
      }, 1000);
    });
  };

  store = function(key, value) {
    return client.set(key, JSON.stringify(plane), function() {
      return stream.write("" + id + ", " + key + "\n");
    });
  };

  broadcast = function(data) {
    return everyone.now.getPlane(data);
  };

  Plane = (function() {

    function Plane(_key) {
      this.key = _key;
      this.data = {};
      this.histo = [];
      this.redisCount = 0;
      return this;
    }

    Plane.prototype.update = function(_data, callback) {
      var test;
      test = this.test(_data);
      if (test) {
        this.data.type = _data[0];
        this.data.registre = _data[1];
        this.data.flynumber2 = _data[2];
        this.data.l_lat = this.data.lat != null ? this.data.lat : null;
        this.data.l_lon = this.data.lon != null ? this.data.lon : null;
        this.data.lat = _data[3];
        this.data.lon = _data[4];
        this.data.alt = _data[5];
        this.data.angle = _data[6];
        this.data.speed = _data[7];
        this.data.timestamp = _data[8];
        this.data.unknow = _data[9];
        this.data.flynumber1 = _data[10];
        this.data.course = _data[11];
        this.histo.push([this.data.lat, this.data.lon]);
        this.redisCount += 1;
        callback(this.key, _data);
      }
      return this;
    };

    Plane.prototype.test = function(_data) {
      var dlat, dlon, point, _i, _lat, _len, _lon, _ref, _ref1;
      _lat = _data[3];
      _lon = _data[4];
      _ref = false;
      _ref1 = this.histo;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        point = _ref1[_i];
        if (point[0] === _lat && point[1] === _lon) {
          _ref = true;
        }
      }
      if (!_ref) {
        if ((this.data.lat != null) && this.data.lon) {
          dlat = Math.abs(this.data.lat - _lat);
          dlon = Math.abs(this.data.lon - _lon);
          if (dlat < 1 && dlon < 1) {
            return true;
          } else {
            return false;
          }
        } else {
          return true;
        }
      } else {
        return false;
      }
    };

    return Plane;

  })();

}).call(this);
